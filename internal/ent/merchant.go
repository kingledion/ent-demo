// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/kingledion/ent-demo/internal/ent/merchant"
)

// Merchant is the model entity for the Merchant schema.
type Merchant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Dba holds the value of the "dba" field.
	Dba string `json:"dba,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MerchantQuery when eager-loading is set.
	Edges MerchantEdges `json:"edges"`
}

// MerchantEdges holds the relations/edges for other nodes in the graph.
type MerchantEdges struct {
	// MOrder holds the value of the m_order edge.
	MOrder []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MOrderOrErr returns the MOrder value or an error if the edge
// was not loaded in eager-loading.
func (e MerchantEdges) MOrderOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.MOrder, nil
	}
	return nil, &NotLoadedError{edge: "m_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Merchant) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // uuid
		&sql.NullString{}, // dba
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Merchant fields.
func (m *Merchant) assignValues(values ...interface{}) error {
	if m, n := len(values), len(merchant.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field uuid", values[0])
	} else if value.Valid {
		m.UUID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field dba", values[1])
	} else if value.Valid {
		m.Dba = value.String
	}
	return nil
}

// QueryMOrder queries the m_order edge of the Merchant.
func (m *Merchant) QueryMOrder() *UserQuery {
	return (&MerchantClient{config: m.config}).QueryMOrder(m)
}

// Update returns a builder for updating this Merchant.
// Note that, you need to call Merchant.Unwrap() before calling this method, if this Merchant
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Merchant) Update() *MerchantUpdateOne {
	return (&MerchantClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Merchant) Unwrap() *Merchant {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Merchant is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Merchant) String() string {
	var builder strings.Builder
	builder.WriteString("Merchant(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(m.UUID)
	builder.WriteString(", dba=")
	builder.WriteString(m.Dba)
	builder.WriteByte(')')
	return builder.String()
}

// Merchants is a parsable slice of Merchant.
type Merchants []*Merchant

func (m Merchants) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
