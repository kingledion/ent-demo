// Code generated by entc, DO NOT EDIT.

package merchant

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/kingledion/ent-demo/internal/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// Dba applies equality check predicate on the "dba" field. It's identical to DbaEQ.
func Dba(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDba), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// DbaEQ applies the EQ predicate on the "dba" field.
func DbaEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDba), v))
	})
}

// DbaNEQ applies the NEQ predicate on the "dba" field.
func DbaNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDba), v))
	})
}

// DbaIn applies the In predicate on the "dba" field.
func DbaIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDba), v...))
	})
}

// DbaNotIn applies the NotIn predicate on the "dba" field.
func DbaNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDba), v...))
	})
}

// DbaGT applies the GT predicate on the "dba" field.
func DbaGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDba), v))
	})
}

// DbaGTE applies the GTE predicate on the "dba" field.
func DbaGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDba), v))
	})
}

// DbaLT applies the LT predicate on the "dba" field.
func DbaLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDba), v))
	})
}

// DbaLTE applies the LTE predicate on the "dba" field.
func DbaLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDba), v))
	})
}

// DbaContains applies the Contains predicate on the "dba" field.
func DbaContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDba), v))
	})
}

// DbaHasPrefix applies the HasPrefix predicate on the "dba" field.
func DbaHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDba), v))
	})
}

// DbaHasSuffix applies the HasSuffix predicate on the "dba" field.
func DbaHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDba), v))
	})
}

// DbaEqualFold applies the EqualFold predicate on the "dba" field.
func DbaEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDba), v))
	})
}

// DbaContainsFold applies the ContainsFold predicate on the "dba" field.
func DbaContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDba), v))
	})
}

// HasMOrder applies the HasEdge predicate on the "m_order" edge.
func HasMOrder() predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MOrderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MOrderTable, MOrderPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMOrderWith applies the HasEdge predicate on the "m_order" edge with a given conditions (other predicates).
func HasMOrderWith(preds ...predicate.User) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MOrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MOrderTable, MOrderPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		p(s.Not())
	})
}
